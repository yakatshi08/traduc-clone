// C:\PROJETS-DEVELOPPEMENT\traduc-clone\backend\prisma\schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  avatar        String?
  role          Role      @default(USER)
  plan          Plan      @default(FREE)
  language      String    @default("fr")
  
  // Quotas
  minutesUsed   Int       @default(0)
  minutesLimit  Int       @default(60)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  projects      Project[]
  documents     Document[]
  transcriptions Transcription[]
  integrations  UserIntegration[]  // NOUVEAU pour Google Drive
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ProjectType @default(GENERAL)
  status      ProjectStatus @default(ACTIVE)
  language    String   @default("fr")  // NOUVEAU
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]
  transcriptions Transcription[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])  // NOUVEAU pour optimisation
  @@map("projects")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  originalName String   // NOUVEAU (nom original du fichier)
  filename    String   // Garder pour compatibilité
  path        String   // NOUVEAU (chemin local ou URL Cloudinary)
  url         String   // Garder pour compatibilité
  publicId    String?  // NOUVEAU pour Cloudinary
  size        Int
  format      String
  mimeType    String   // NOUVEAU
  type        DocumentType
  storageType String   @default("local")  // NOUVEAU (local/cloudinary/google-drive)
  googleDriveId String? // NOUVEAU pour Google Drive
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  transcriptions Transcription[]
  
  // Metadata
  language    String?
  duration    Int?     // en secondes pour audio/video
  wordCount   Int?
  status      String   @default("uploaded")  // NOUVEAU
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])  // NOUVEAU pour optimisation
  @@index([projectId])  // NOUVEAU pour optimisation
  @@map("documents")
}

model Transcription {
  id          String   @id @default(cuid())
  content     String?  @db.Text  // Changé en optionnel et Text pour long contenu
  segments    Json?    // NOUVEAU pour Whisper (segments avec timestamps)
  words       Json?    // NOUVEAU pour Whisper (mots avec timestamps)
  status      TranscriptionStatus @default(PENDING)  // Changé de PROCESSING à PENDING
  engine      String   @default("whisper")
  options     Json?    // NOUVEAU (options de transcription)
  error       String?  // NOUVEAU (message d'erreur si échec)
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  // Metadata
  language    String   @default("fr")
  confidence  Json?    // Changé de Float? à Json? pour données détaillées
  accuracy    Float?   // NOUVEAU (précision globale)
  duration    Int?     // en secondes
  wordCount   Int?
  
  // Timestamps
  startedAt   DateTime?  // Changé en optionnel
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])  // NOUVEAU pour optimisation
  @@index([projectId])  // NOUVEAU pour optimisation
  @@index([documentId])  // NOUVEAU pour optimisation
  @@index([status])  // NOUVEAU pour optimisation
  @@map("transcriptions")
}

// NOUVEAU modèle pour les intégrations (Google Drive, Dropbox, etc.)
model UserIntegration {
  id              String           @id @default(cuid())
  provider        String           // google-drive, dropbox, onedrive
  accessToken     String           @db.Text
  refreshToken    String?          @db.Text
  expiresAt       DateTime?
  metadata        Json?            // Données supplémentaires spécifiques au provider
  
  // Relations
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([userId, provider])
  @@index([userId])
  @@map("user_integrations")
}

// Enums (garder les existants)
enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  STARTER    // NOUVEAU (pour cohérence avec le cahier des charges)
  PRO
  BUSINESS
  ENTERPRISE
}

enum ProjectType {
  GENERAL
  MEDICAL
  LEGAL
  EDUCATION
  BUSINESS
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum DocumentType {
  DOCUMENT      // Renommé de TRANSCRIPTION
  AUDIO         // NOUVEAU
  VIDEO         // NOUVEAU
  TRANSLATION   // Garder
  ORIGINAL      // Garder
}

enum TranscriptionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED       // Renommé de ERROR
  CANCELLED    // NOUVEAU
}