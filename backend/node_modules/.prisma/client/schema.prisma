generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String?
  avatar   String?
  role     Role    @default(USER)
  plan     Plan    @default(FREE)
  language String  @default("fr")

  // Quotas
  minutesUsed  Int @default(0)
  minutesLimit Int @default(60)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  projects       Project[]
  documents      Document[]
  transcriptions Transcription[]
  integrations   UserIntegration[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        ProjectType   @default(GENERAL)
  status      ProjectStatus @default(ACTIVE)
  language    String        @default("fr")

  // Relations
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents      Document[]
  transcriptions Transcription[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("projects")
}

model Document {
  id            String       @id @default(cuid())
  name          String
  originalName  String
  filename      String
  path          String
  url           String
  publicId      String?
  size          Int
  format        String
  mimeType      String
  type          DocumentType
  storageType   String       @default("local")
  googleDriveId String?

  // Relations
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project?        @relation(fields: [projectId], references: [id], onDelete: SetNull)
  transcriptions Transcription[]

  // Metadata
  language  String?
  duration  Int?
  wordCount Int?
  status    String  @default("uploaded")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
  @@map("documents")
}

model Transcription {
  id       String              @id @default(cuid())
  content  String?             @db.Text
  segments Json?
  words    Json?
  status   TranscriptionStatus @default(PENDING)
  engine   String              @default("whisper")
  options  Json?
  error    String?

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Metadata
  language   String @default("fr")
  confidence Json?
  accuracy   Float?
  duration   Int?
  wordCount  Int?

  // Timestamps
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([documentId])
  @@index([status])
  @@map("transcriptions")
}

model UserIntegration {
  id           String    @id @default(cuid())
  provider     String
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  metadata     Json?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
  @@index([userId])
  @@map("user_integrations")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  STARTER
  PRO
  BUSINESS
  ENTERPRISE
}

enum ProjectType {
  GENERAL
  MEDICAL
  LEGAL
  EDUCATION
  BUSINESS
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  DELETED
}

enum DocumentType {
  DOCUMENT
  AUDIO
  VIDEO
  TRANSLATION
  ORIGINAL
  OTHER
}

enum TranscriptionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
