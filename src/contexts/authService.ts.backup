import axios from 'axios';
import CryptoJS from 'crypto-js';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
const ENCRYPTION_KEY = import.meta.env.VITE_ENCRYPTION_KEY || 'traducxion-secret-key-2025';

export interface User {
  id: string;
  email: string;
  name: string;
  plan: 'freemium' | 'pro' | 'business' | 'enterprise';
  role: 'user' | 'admin';
  createdAt: Date;
  usage: {
    minutes: number;
    monthlyLimit: number;
    lastReset: Date;
  };
  preferences: {
    language: string;
    sector?: string;
    notifications: boolean;
  };
  twoFactorEnabled: boolean;
}

export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterData {
  email: string;
  password: string;
  name: string;
  plan?: 'freemium' | 'pro' | 'business' | 'enterprise';
}

export interface AuthResponse {
  user: User;
  token: string;
  refreshToken?: string;
}

class AuthService {
  private axiosInstance = axios.create({
    baseURL: API_URL,
    headers: {
      'Content-Type': 'application/json'
    }
  });

  constructor() {
    // Intercepteur pour ajouter le token aux requêtes
    this.axiosInstance.interceptors.request.use((config) => {
      const token = localStorage.getItem('auth_token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
      return config;
    });

    // Intercepteur pour gérer les erreurs d'authentification
    this.axiosInstance.interceptors.response.use(
      (response) => response,
      async (error) => {
        if (error.response?.status === 401) {
          // Token expiré, essayer de rafraîchir
          const refreshToken = localStorage.getItem('refresh_token');
          if (refreshToken) {
            try {
              const newToken = await this.refreshToken(refreshToken);
              localStorage.setItem('auth_token', newToken);
              // Réessayer la requête originale
              error.config.headers.Authorization = `Bearer ${newToken}`;
              return this.axiosInstance(error.config);
            } catch (refreshError) {
              // Échec du refresh, déconnexion
              this.logout();
              window.location.href = '/login';
            }
          }
        }
        return Promise.reject(error);
      }
    );
  }

  // Chiffrement du mot de passe côté client (couche supplémentaire)
  private encryptPassword(password: string): string {
    return CryptoJS.AES.encrypt(password, ENCRYPTION_KEY).toString();
  }

  // Connexion
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      // Pour le développement, simuler l'API
      if (!API_URL || API_URL.includes('localhost')) {
        return this.mockLogin(credentials);
      }

      const response = await this.axiosInstance.post('/auth/login', {
        email: credentials.email,
        password: this.encryptPassword(credentials.password),
        rememberMe: credentials.rememberMe
      });

      return response.data;
    } catch (error) {
      throw new Error('Échec de la connexion');
    }
  }

  // Inscription
  async register(data: RegisterData): Promise<AuthResponse> {
    try {
      // Pour le développement, simuler l'API
      if (!API_URL || API_URL.includes('localhost')) {
        return this.mockRegister(data);
      }

      const response = await this.axiosInstance.post('/auth/register', {
        ...data,
        password: this.encryptPassword(data.password)
      });

      return response.data;
    } catch (error) {
      throw new Error('Échec de l\'inscription');
    }
  }

  // Déconnexion
  async logout(): Promise<void> {
    try {
      await this.axiosInstance.post('/auth/logout');
    } catch (error) {
      console.error('Logout error:', error);
    }
    localStorage.removeItem('auth_token');
    localStorage.removeItem('refresh_token');
  }

  // Vérifier le token
  async verifyToken(token: string): Promise<User> {
    try {
      // Pour le développement, simuler l'API
      if (!API_URL || API_URL.includes('localhost')) {
        return this.mockVerifyToken(token);
      }

      const response = await this.axiosInstance.get('/auth/verify', {
        headers: { Authorization: `Bearer ${token}` }
      });

      return response.data.user;
    } catch (error) {
      throw new Error('Token invalide');
    }
  }

  // Rafraîchir le token
  async refreshToken(refreshToken: string): Promise<string> {
    try {
      const response = await this.axiosInstance.post('/auth/refresh', {
        refreshToken
      });

      return response.data.token;
    } catch (error) {
      throw new Error('Échec du rafraîchissement du token');
    }
  }

  // Configuration 2FA
  async enable2FA(): Promise<{ qrCode: string; secret: string }> {
    const response = await this.axiosInstance.post('/auth/2fa/enable');
    return response.data;
  }

  async verify2FA(code: string): Promise<boolean> {
    const response = await this.axiosInstance.post('/auth/2fa/verify', { code });
    return response.data.success;
  }

  async disable2FA(code: string): Promise<boolean> {
    const response = await this.axiosInstance.post('/auth/2fa/disable', { code });
    return response.data.success;
  }

  // SSO (Single Sign-On)
  async loginWithGoogle(): Promise<void> {
    window.location.href = `${API_URL}/auth/google`;
  }

  async loginWithMicrosoft(): Promise<void> {
    window.location.href = `${API_URL}/auth/microsoft`;
  }

  async handleSSOCallback(provider: string, code: string): Promise<AuthResponse> {
    const response = await this.axiosInstance.post(`/auth/${provider}/callback`, { code });
    return response.data;
  }

  // Réinitialisation du mot de passe
  async requestPasswordReset(email: string): Promise<void> {
    await this.axiosInstance.post('/auth/reset-password', { email });
  }

  async resetPassword(token: string, newPassword: string): Promise<void> {
    await this.axiosInstance.post('/auth/reset-password/confirm', {
      token,
      password: this.encryptPassword(newPassword)
    });
  }

  // Mock pour le développement
  private mockLogin(credentials: LoginCredentials): Promise<AuthResponse> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (credentials.email === 'demo@traducxion.com' && credentials.password === 'demo123') {
          const user: User = {
            id: '1',
            email: credentials.email,
            name: 'Demo User',
            plan: 'pro',
            role: 'user',
            createdAt: new Date(),
            usage: {
              minutes: 150,
              monthlyLimit: 500,
              lastReset: new Date()
            },
            preferences: {
              language: 'fr',
              notifications: true
            },
            twoFactorEnabled: false
          };

          resolve({
            user,
            token: 'mock-jwt-token-' + Date.now(),
            refreshToken: 'mock-refresh-token-' + Date.now()
          });
        } else {
          reject(new Error('Email ou mot de passe incorrect'));
        }
      }, 1000);
    });
  }

  private mockRegister(data: RegisterData): Promise<AuthResponse> {
    return new Promise((resolve) => {
      setTimeout(() => {
        const user: User = {
          id: Date.now().toString(),
          email: data.email,
          name: data.name,
          plan: data.plan || 'freemium',
          role: 'user',
          createdAt: new Date(),
          usage: {
            minutes: 0,
            monthlyLimit: data.plan === 'pro' ? 500 : data.plan === 'business' ? 2000 : 60,
            lastReset: new Date()
          },
          preferences: {
            language: 'fr',
            notifications: true
          },
          twoFactorEnabled: false
        };

        resolve({
          user,
          token: 'mock-jwt-token-' + Date.now(),
          refreshToken: 'mock-refresh-token-' + Date.now()
        });
      }, 1000);
    });
  }

  private mockVerifyToken(token: string): Promise<User> {
    return new Promise((resolve, reject) => {
      if (token.startsWith('mock-jwt-token-')) {
        resolve({
          id: '1',
          email: 'demo@traducxion.com',
          name: 'Demo User',
          plan: 'pro',
          role: 'user',
          createdAt: new Date(),
          usage: {
            minutes: 150,
            monthlyLimit: 500,
            lastReset: new Date()
          },
          preferences: {
            language: 'fr',
            notifications: true
          },
          twoFactorEnabled: false
        });
      } else {
        reject(new Error('Token invalide'));
      }
    });
  }
}

export const authService = new AuthService();