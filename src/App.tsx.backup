// src/App.tsx

import React, { Suspense, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { Toaster } from 'react-hot-toast';
import { ErrorBoundary } from 'react-error-boundary';
import { I18nextProvider } from 'react-i18next';
import i18n from './i18n/config';

// Providers
import { LanguageProvider } from './contexts/LanguageContext';
import { ThemeProvider } from './contexts/ThemeContext';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { WebSocketProvider } from './contexts/WebSocketContext';
import { NotificationProvider } from './contexts/NotificationContext';

// Components
import Header from './components/Layout/Header';
import LoadingScreen from './components/common/LoadingScreen';
import ErrorFallback from './components/common/ErrorFallback';
import OfflineIndicator from './components/common/OfflineIndicator';
import UpdateNotification from './components/common/UpdateNotification';

// Lazy loading des pages
const Dashboard = React.lazy(() => import('./components/Dashboard/Dashboard'));
const LoginPageV2 = React.lazy(() => import('./components/Auth/LoginPageV2'));
const TranscriptionPage = React.lazy(() => import('./pages/TranscriptionPage'));
const TranslationPage = React.lazy(() => import('./pages/TranslationPage'));
const DocumentsPage = React.lazy(() => import('./pages/DocumentsPage'));
const ProjectsPage = React.lazy(() => import('./pages/ProjectsPage'));
const AnalyticsPage = React.lazy(() => import('./pages/AnalyticsPage'));
const SettingsPage = React.lazy(() => import('./pages/SettingsPage'));
const CloudIntegrationsPage = React.lazy(() => import('./pages/CloudIntegrationsPage'));
const SectorConfigPage = React.lazy(() => import('./pages/SectorConfigPage'));
const PricingPage = React.lazy(() => import('./pages/PricingPage'));
const VideosPage = React.lazy(() => import('./pages/VideosPage'));
const AudiosPage = React.lazy(() => import('./pages/AudiosPage'));
const IntegrationsPage = React.lazy(() => import('./pages/IntegrationsPage'));
const CollaborationPage = React.lazy(() => import('./pages/CollaborationPage'));
const ProfilePage = React.lazy(() => import('./pages/ProfilePage'));
const NotFoundPage = React.lazy(() => import('./pages/NotFoundPage'));

// Configuration React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 3,
      refetchOnWindowFocus: false,
    },
  },
});

// ========================================
// COMPOSANT DE ROUTE PROTÉGÉE
// ========================================
function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (!isAuthenticated) {
    // Sauvegarder la page demandée pour redirection après login
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
}

// ========================================
// LAYOUT PRINCIPAL AVEC HEADER
// ========================================
function MainLayout({ children }: { children: React.ReactNode }) {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const { logout } = useAuth();

  // Mapper les routes aux tabs pour le Header
  const getActiveTab = () => {
    const path = location.pathname;
    if (path === '/' || path === '/dashboard') return 'dashboard';
    if (path.startsWith('/projects')) return 'projects';
    if (path.startsWith('/transcription')) return 'transcription';
    if (path.startsWith('/translation')) return 'translation';
    if (path.startsWith('/documents')) return 'documents';
    if (path.startsWith('/analytics')) return 'analytics';
    if (path.startsWith('/settings')) return 'settings';
    return path.slice(1); // Enlever le /
  };

  const handleTabChange = (tab: string) => {
    if (tab === 'logout') {
      logout();
    } else {
      navigate(`/${tab}`);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <Header
        onMenuClick={() => setIsMenuOpen(!isMenuOpen)}
        isMenuOpen={isMenuOpen}
        onTabChange={handleTabChange}
        activeTab={getActiveTab()}
      />
      
      <main className="pt-16">
        <div className="container mx-auto px-4 py-8">
          {/* Barre d'info utilisateur */}
          <UserInfoBar />
          
          {/* Contenu */}
          <Suspense fallback={<LoadingScreen />}>
            {children}
          </Suspense>
        </div>
      </main>
      
      {/* Indicateurs globaux */}
      <OfflineIndicator />
      <UpdateNotification />
    </div>
  );
}

// ========================================
// BARRE D'INFO UTILISATEUR
// ========================================
function UserInfoBar() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  return (
    <div className="mb-6 p-3 bg-gray-800/50 backdrop-blur rounded-lg flex items-center justify-between border border-gray-700">
      <div className="flex items-center gap-4">
        <button
          onClick={() => navigate('/profile')}
          className="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center hover:scale-110 transition-transform cursor-pointer"
        >
          <span className="text-white font-semibold">
            {user.firstName?.[0]}{user.lastName?.[0] || user.email[0].toUpperCase()}
          </span>
        </button>
        <div>
          <p className="text-sm font-medium">{user.email}</p>
          <p className="text-xs text-gray-400">
            Plan {user.plan || 'Free'} • {user.role === 'admin' ? 'Administrateur' : 'Utilisateur'}
          </p>
        </div>
      </div>
      
      <div className="flex items-center gap-2">
        <button
          onClick={() => navigate('/settings')}
          className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-sm transition-all"
        >
          Paramètres
        </button>
        <button
          onClick={logout}
          className="px-4 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 hover:text-red-300 rounded-lg text-sm transition-all border border-red-600/50"
        >
          Déconnexion
        </button>
      </div>
    </div>
  );
}

// ========================================
// COMPOSANT PRINCIPAL APP
// ========================================
function App() {
  // Monitoring des performances
  useEffect(() => {
    // Web Vitals
    if ('web-vital' in window) {
      const reportWebVitals = (metric: any) => {
        console.log('Web Vital:', metric);
        // Envoyer à votre service d'analytics
      };
      (window as any).webVitals.getCLS(reportWebVitals);
      (window as any).webVitals.getFID(reportWebVitals);
      (window as any).webVitals.getLCP(reportWebVitals);
    }

    // Service Worker pour PWA
    if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
      navigator.serviceWorker.register('/sw.js').then(
        (registration) => console.log('SW registered:', registration),
        (error) => console.log('SW registration failed:', error)
      );
    }
  }, []);

  return (
    <ErrorBoundary
      FallbackComponent={ErrorFallback}
      onReset={() => window.location.reload()}
    >
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <Router>
            <LanguageProvider>
              <ThemeProvider>
                <AuthProvider>
                  <WebSocketProvider>
                    <NotificationProvider>
                      {/* Toast notifications */}
                      <Toaster
                        position="top-right"
                        toastOptions={{
                          duration: 4000,
                          style: {
                            background: '#1f2937',
                            color: '#fff',
                            border: '1px solid #374151',
                          },
                          success: {
                            iconTheme: {
                              primary: '#10b981',
                              secondary: '#fff',
                            },
                          },
                          error: {
                            iconTheme: {
                              primary: '#ef4444',
                              secondary: '#fff',
                            },
                          },
                        }}
                      />
                      
                      {/* Routes */}
                      <Routes>
                        {/* Route publique - Login */}
                        <Route
                          path="/login"
                          element={
                            <Suspense fallback={<LoadingScreen />}>
                              <LoginPageV2 />
                            </Suspense>
                          }
                        />
                        
                        {/* Routes protégées */}
                        <Route
                          path="/*"
                          element={
                            <ProtectedRoute>
                              <MainLayout>
                                <Routes>
                                  {/* Dashboard */}
                                  <Route path="/" element={<Navigate to="/dashboard" replace />} />
                                  <Route path="/dashboard" element={<Dashboard />} />
                                  
                                  {/* Projets */}
                                  <Route path="/projects" element={<ProjectsPage />} />
                                  <Route path="/projects/:id" element={<ProjectsPage />} />
                                  
                                  {/* Transcription & Traduction */}
                                  <Route path="/transcription" element={<TranscriptionPage />} />
                                  <Route path="/transcription/:id" element={<TranscriptionPage />} />
                                  <Route path="/translation" element={<TranslationPage />} />
                                  <Route path="/translation/:id" element={<TranslationPage />} />
                                  
                                  {/* Documents & Médias */}
                                  <Route path="/documents" element={<DocumentsPage />} />
                                  <Route path="/documents/:id" element={<DocumentsPage />} />
                                  <Route path="/videos" element={<VideosPage />} />
                                  <Route path="/audios" element={<AudiosPage />} />
                                  
                                  {/* Intégrations & IA */}
                                  <Route path="/cloud-integrations" element={<CloudIntegrationsPage />} />
                                  <Route path="/integrations" element={<IntegrationsPage />} />
                                  <Route path="/ai-tools" element={<SectorConfigPage />} />
                                  
                                  {/* Analytics & Collaboration */}
                                  <Route path="/analytics" element={<AnalyticsPage />} />
                                  <Route path="/collaboration" element={<CollaborationPage />} />
                                  
                                  {/* Paramètres & Profil */}
                                  <Route path="/settings" element={<SettingsPage />} />
                                  <Route path="/profile" element={<ProfilePage />} />
                                  <Route path="/pricing" element={<PricingPage />} />
                                  
                                  {/* 404 */}
                                  <Route path="*" element={<NotFoundPage />} />
                                </Routes>
                              </MainLayout>
                            </ProtectedRoute>
                          }
                        />
                      </Routes>
                    </NotificationProvider>
                  </WebSocketProvider>
                </AuthProvider>
              </ThemeProvider>
            </LanguageProvider>
          </Router>
        </I18nextProvider>
        
        {/* React Query Devtools en dev */}
        {process.env.NODE_ENV === 'development' && (
          <ReactQueryDevtools initialIsOpen={false} />
        )}
      </QueryClientProvider>
    </ErrorBoundary>
  );
}

export default App;