import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Mail, 
  Lock, 
  Eye, 
  EyeOff, 
  AlertCircle,
  Loader2,
  Chrome,
  Github,
  Shield,
  CheckCircle,
  Key
} from 'lucide-react';

const LoginPage: React.FC<{ onLoginSuccess?: () => void }> = ({ onLoginSuccess }) => {
  const { t } = useTranslation('auth');
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [showMFA, setShowMFA] = useState(false);
  const [mfaCode, setMfaCode] = useState('');
  const [loginAttempts, setLoginAttempts] = useState(0);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    if (loginAttempts >= 5) {
      setError('Trop de tentatives. Veuillez réessayer dans 5 minutes.');
      setIsLoading(false);
      return;
    }

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      if (email === 'demo@traducxion.com' && password === 'demo123') {
        if (email.includes('2fa')) {
          setShowMFA(true);
          setIsLoading(false);
          return;
        }
        
        const successMessage = document.createElement('div');
        successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slide-in';
        successMessage.innerHTML = '✓ Connexion réussie';
        document.body.appendChild(successMessage);
        
        setTimeout(() => {
          // CORRECTION : Marquer comme authentifié AVANT de recharger
          localStorage.setItem('isAuthenticated', 'true');
          
          // Notifier le composant parent si nécessaire
          if (onLoginSuccess) onLoginSuccess();
          
          window.location.reload(); // Recharger pour afficher le dashboard
        }, 500);
      } else {
        setLoginAttempts(prev => prev + 1);
        throw new Error('Email ou mot de passe incorrect');
      }
    } catch (err: any) {
      setError(err.message || 'Erreur de connexion');
    } finally {
      setIsLoading(false);
    }
  };

  const handleMFASubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      if (mfaCode === '123456') {
        // Marquer comme authentifié
        localStorage.setItem('isAuthenticated', 'true');
        
        // Notifier le composant parent si nécessaire
        if (onLoginSuccess) onLoginSuccess();
        
        window.location.reload();
      } else {
        setError('Code incorrect');
      }
    } catch (err) {
      setError('Erreur de vérification');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialLogin = async (provider: 'google' | 'microsoft' | 'github') => {
    setIsLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log(`Login with ${provider}`);
      
      // Marquer comme authentifié
      localStorage.setItem('isAuthenticated', 'true');
      
      // Notifier le composant parent si nécessaire
      if (onLoginSuccess) onLoginSuccess();
      
      window.location.reload();
    } catch (err) {
      setError('Erreur de connexion sociale');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-traduc-slate-900 via-traduc-slate-800 to-traduc-violet/20 flex items-center justify-center px-4 relative overflow-hidden">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-traduc-violet/20 rounded-full blur-3xl animate-pulse" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-traduc-indigo/20 rounded-full blur-3xl animate-pulse delay-1000" />
      </div>

      <div className="w-full max-w-md relative z-10">
        <div className="text-center mb-8 animate-fade-in-down">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="w-14 h-14 bg-gradient-to-br from-traduc-violet to-traduc-indigo rounded-xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-transform">
              <span className="text-white font-bold text-2xl">TX</span>
            </div>
            <span className="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              TraducXion
            </span>
          </div>
          <h1 className="text-3xl font-bold text-white mb-2 animate-fade-in">
            {t('login.title', 'Bon retour !')}
          </h1>
          <p className="text-gray-400 animate-fade-in delay-200">
            {t('login.subtitle', 'Connectez-vous à votre compte professionnel')}
          </p>
        </div>

        <div className="flex justify-center mb-4 animate-fade-in delay-300">
          <div className="flex items-center gap-2 px-3 py-1 bg-green-500/10 border border-green-500/30 rounded-full">
            <Shield className="w-4 h-4 text-green-400" />
            <span className="text-xs text-green-400">Connexion sécurisée SSL</span>
          </div>
        </div>

        <form onSubmit={showMFA ? handleMFASubmit : handleSubmit} className="animate-fade-in-up delay-400">
          <div className="backdrop-blur-xl bg-white/10 rounded-2xl p-8 shadow-2xl border border-white/20">
            
            {error && (
              <div className="mb-6 p-4 bg-red-500/10 backdrop-blur border border-red-500/30 rounded-lg flex items-start gap-3 animate-shake">
                <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="text-sm text-red-400 font-medium">{error}</p>
                  {loginAttempts >= 3 && (
                    <p className="text-xs text-red-300 mt-1">
                      {5 - loginAttempts} tentatives restantes
                    </p>
                  )}
                </div>
              </div>
            )}

            {!showMFA ? (
              <>
                <div className="mb-6">
                  <label htmlFor="email" className="block text-sm font-medium text-gray-300 mb-2">
                    {t('login.email', 'Adresse email professionnelle')}
                  </label>
                  <div className="relative group">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Mail className="h-5 w-5 text-gray-500 group-focus-within:text-traduc-violet transition-colors" />
                    </div>
                    <input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="w-full pl-10 pr-3 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-traduc-violet focus:border-transparent backdrop-blur transition-all"
                      placeholder="vous@entreprise.com"
                      required
                      disabled={isLoading}
                      autoComplete="email"
                    />
                    {email && email.includes('@') && (
                      <CheckCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-green-400 animate-fade-in" />
                    )}
                  </div>
                </div>

                <div className="mb-6">
                  <label htmlFor="password" className="block text-sm font-medium text-gray-300 mb-2">
                    {t('login.password', 'Mot de passe')}
                  </label>
                  <div className="relative group">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-gray-500 group-focus-within:text-traduc-violet transition-colors" />
                    </div>
                    <input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="w-full pl-10 pr-10 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-traduc-violet focus:border-transparent backdrop-blur transition-all"
                      placeholder="••••••••"
                      required
                      disabled={isLoading}
                      autoComplete="current-password"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center group"
                    >
                      {showPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-500 hover:text-gray-300 transition-colors" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-500 hover:text-gray-300 transition-colors" />
                      )}
                    </button>
                  </div>
                </div>

                <div className="flex items-center justify-between mb-6">
                  <label className="flex items-center group cursor-pointer">
                    <input
                      type="checkbox"
                      checked={rememberMe}
                      onChange={(e) => setRememberMe(e.target.checked)}
                      className="h-4 w-4 text-traduc-violet bg-white/10 border-white/20 rounded focus:ring-traduc-violet focus:ring-offset-0"
                      disabled={isLoading}
                    />
                    <span className="ml-2 text-sm text-gray-300 group-hover:text-white transition-colors">
                      {t('login.rememberMe', 'Rester connecté')}
                    </span>
                  </label>
                  <a 
                    href="/forgot-password" 
                    className="text-sm text-traduc-violet hover:text-traduc-violet/80 font-medium transition-colors"
                  >
                    {t('login.forgotPassword', 'Mot de passe oublié ?')}
                  </a>
                </div>
              </>
            ) : (
              <div className="mb-6 text-center">
                <div className="mb-6">
                  <Key className="w-16 h-16 text-traduc-violet mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-white mb-2">
                    Vérification en deux étapes
                  </h3>
                  <p className="text-sm text-gray-400">
                    Entrez le code à 6 chiffres de votre application
                  </p>
                </div>
                <input
                  type="text"
                  value={mfaCode}
                  onChange={(e) => setMfaCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                  className="w-full px-4 py-4 bg-white/5 border border-white/20 rounded-lg text-white text-center text-2xl tracking-[0.5em] placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-traduc-violet backdrop-blur"
                  placeholder="000000"
                  maxLength={6}
                  required
                  disabled={isLoading}
                  autoComplete="one-time-code"
                />
                <button
                  type="button"
                  onClick={() => setShowMFA(false)}
                  className="mt-4 text-sm text-gray-400 hover:text-white transition-colors"
                >
                  ← Retour à la connexion
                </button>
              </div>
            )}

            <button
              type="submit"
              disabled={isLoading || loginAttempts >= 5}
              className="w-full py-3 px-4 bg-gradient-to-r from-traduc-violet to-traduc-indigo hover:from-traduc-violet/90 hover:to-traduc-indigo/90 text-white font-medium rounded-lg transition-all transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none shadow-lg shadow-traduc-violet/25 flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  {showMFA ? 'Vérification...' : t('login.loading', 'Connexion sécurisée...')}
                </>
              ) : (
                <>
                  {showMFA ? 'Vérifier' : t('login.button', 'Se connecter')}
                  <Shield className="w-4 h-4 ml-1" />
                </>
              )}
            </button>

            <div className="mt-6 p-4 bg-blue-500/10 backdrop-blur border border-blue-500/30 rounded-lg">
              <p className="text-xs text-blue-300 text-center">
                <strong className="text-blue-400">Compte démo :</strong> demo@traducxion.com / demo123
              </p>
            </div>
          </div>

          <div className="relative my-8">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-white/10" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-4 bg-gradient-to-br from-traduc-slate-900 via-traduc-slate-800 to-traduc-violet/20 text-gray-400">
                {t('login.orContinueWith', 'Ou continuer avec')}
              </span>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-3">
            <button
              type="button"
              onClick={() => handleSocialLogin('google')}
              className="group relative px-4 py-3 bg-white/5 backdrop-blur border border-white/20 rounded-lg hover:bg-white/10 transition-all transform hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:transform-none"
              disabled={isLoading}
            >
              <Chrome className="w-5 h-5 text-gray-400 group-hover:text-white mx-auto transition-colors" />
              <span className="sr-only">Google</span>
              <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-red-500/0 via-yellow-500/0 to-green-500/0 group-hover:from-red-500/20 group-hover:via-yellow-500/20 group-hover:to-green-500/20 transition-all" />
            </button>
            <button
              type="button"
              onClick={() => handleSocialLogin('microsoft')}
              className="group relative px-4 py-3 bg-white/5 backdrop-blur border border-white/20 rounded-lg hover:bg-white/10 transition-all transform hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:transform-none"
              disabled={isLoading}
            >
              <span className="text-xl">🔷</span>
              <span className="sr-only">Microsoft</span>
              <div className="absolute inset-0 rounded-lg bg-blue-500/0 group-hover:bg-blue-500/20 transition-all" />
            </button>
            <button
              type="button"
              onClick={() => handleSocialLogin('github')}
              className="group relative px-4 py-3 bg-white/5 backdrop-blur border border-white/20 rounded-lg hover:bg-white/10 transition-all transform hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:transform-none"
              disabled={isLoading}
            >
              <Github className="w-5 h-5 text-gray-400 group-hover:text-white mx-auto transition-colors" />
              <span className="sr-only">GitHub</span>
              <div className="absolute inset-0 rounded-lg bg-gray-500/0 group-hover:bg-gray-500/20 transition-all" />
            </button>
          </div>
        </form>

        <div className="mt-8 text-center space-y-4 animate-fade-in delay-500">
          <p className="text-gray-400">
            Pas encore de compte ?{' '}
            <a
              href="/register"
              className="text-traduc-violet hover:text-traduc-violet/80 font-medium transition-colors"
            >
              Commencer votre essai gratuit
            </a>
          </p>
          
          <div className="text-xs text-gray-500">
            <p className="mb-2">
              Connexion sécurisée • Chiffrement AES-256 • Conforme RGPD
            </p>
            <div>
              En vous connectant, vous acceptez nos{' '}
              <a href="/terms" className="text-traduc-violet/70 hover:text-traduc-violet transition-colors">
                Conditions
              </a>
              {' '}et notre{' '}
              <a href="/privacy" className="text-traduc-violet/70 hover:text-traduc-violet transition-colors">
                Politique de confidentialité
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;